# zle.zsh: Configuration for the Z Line Editor
# P.C. Shyamshankar <sykora@lucentbeing.com>

# Automatically generated by zkbd.
typeset -g -A key

key[F1]='^[[11~'
key[F2]='^[[12~'
key[F3]='^[[13~'
key[F4]='^[[14~'
key[F5]='^[[15~'
key[F6]='^[[17~'
key[F7]='^[[18~'
key[F8]='^[[19~'
key[F9]='^[[20~'
key[F10]='^[[21~'
key[F11]='^[[23~'
key[F12]='^[[24~'
key[Backspace]='^?'
key[Insert]='^[[2~'

# key[Home]='\e[1~' # beginning-of-line # Home

bindkey '^[[7~' beginning-of-line
bindkey '^[[8~' end-of-line


key[Home]='^[[1~' #7
key[PageUp]='^[[5~'
key[Delete]='^[[3~'

key[End]='^[[4~' #8

key[PageDown]='^[[6~'
key[Up]='^[[A'
key[Left]='^[[D'
key[Down]='^[[B'
key[Right]='^[[C'
key[Menu]='^[[29~'

# Create some blank keymaps to play with.
bindkey -N sins .safe
bindkey -N scmd .safe

# Load required widgets
autoload insert-composed-char
autoload edit-command-line

zle -N edit-command-line
zle -N insert-composed-char

# Let the binding begin.
bindkey $key[Delete] delete-char
bindkey $key[Backspace] backward-delete-char

bindkey "" backward-delete-word
bindkey "[3^" delete-word

bindkey $key[Right] forward-char
bindkey $key[Left] backward-char

bindkey $key[Up] up-line-or-history
bindkey $key[Down] down-line-or-history

bindkey "^Q" push-line

bindkey "^A" beginning-of-line
bindkey "^E" end-of-line

bindkey "^N" backward-word
bindkey "^O" forward-word

bindkey "^S" history-incremental-search-forward
bindkey "^R" history-incremental-search-backward

bindkey "^V" quoted-insert

bindkey "^K" kill-line
bindkey "^U" kill-whole-line

bindkey "^I" expand-or-complete

bindkey "^L" clear-screen
bindkey "^K" insert-composed-char

bindkey "^X" execute-named-cmd

bindkey $key[F1] run-help
bindkey $key[F2] edit-command-line


if [[ "$TERM" != emacs ]]; then
[[ -z "$terminfo[kdch1]" ]] || bindkey -M emacs "$terminfo[kdch1]" delete-char
[[ -z "$terminfo[khome]" ]] || bindkey -M emacs "$terminfo[khome]" beginning-of-line
[[ -z "$terminfo[kend]" ]] || bindkey -M emacs "$terminfo[kend]" end-of-line
[[ -z "$terminfo[kich1]" ]] || bindkey -M emacs "$terminfo[kich1]" overwrite-mode
[[ -z "$terminfo[kdch1]" ]] || bindkey -M vicmd "$terminfo[kdch1]" vi-delete-char
[[ -z "$terminfo[khome]" ]] || bindkey -M vicmd "$terminfo[khome]" vi-beginning-of-line
[[ -z "$terminfo[kend]" ]] || bindkey -M vicmd "$terminfo[kend]" vi-end-of-line
[[ -z "$terminfo[kich1]" ]] || bindkey -M vicmd "$terminfo[kich1]" overwrite-mode

[[ -z "$terminfo[cuu1]" ]] || bindkey -M viins "$terminfo[cuu1]" vi-up-line-or-history
[[ -z "$terminfo[cuf1]" ]] || bindkey -M viins "$terminfo[cuf1]" vi-forward-char
[[ -z "$terminfo[kcuu1]" ]] || bindkey -M viins "$terminfo[kcuu1]" vi-up-line-or-history
[[ -z "$terminfo[kcud1]" ]] || bindkey -M viins "$terminfo[kcud1]" vi-down-line-or-history
[[ -z "$terminfo[kcuf1]" ]] || bindkey -M viins "$terminfo[kcuf1]" vi-forward-char
[[ -z "$terminfo[kcub1]" ]] || bindkey -M viins "$terminfo[kcub1]" vi-backward-char

# ncurses fogyatekos
[[ "$terminfo[kcuu1]" == "^[O"* ]] && bindkey -M viins "${terminfo[kcuu1]/O/[}" vi-up-line-or-history
[[ "$terminfo[kcud1]" == "^[O"* ]] && bindkey -M viins "${terminfo[kcud1]/O/[}" vi-down-line-or-history
[[ "$terminfo[kcuf1]" == "^[O"* ]] && bindkey -M viins "${terminfo[kcuf1]/O/[}" vi-forward-char
[[ "$terminfo[kcub1]" == "^[O"* ]] && bindkey -M viins "${terminfo[kcub1]/O/[}" vi-backward-char
[[ "$terminfo[khome]" == "^[O"* ]] && bindkey -M viins "${terminfo[khome]/O/[}" beginning-of-line
[[ "$terminfo[kend]" == "^[O"* ]] && bindkey -M viins "${terminfo[kend]/O/[}" end-of-line
[[ "$terminfo[khome]" == "^[O"* ]] && bindkey -M emacs "${terminfo[khome]/O/[}" beginning-of-line
[[ "$terminfo[kend]" == "^[O"* ]] && bindkey -M emacs "${terminfo[kend]/O/[}" end-of-line
fi

